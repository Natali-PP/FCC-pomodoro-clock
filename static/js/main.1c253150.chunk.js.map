{"version":3,"sources":["wronger-rave-hit.wav","Break.js","Session.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Break","props","id","className","onClick","decrementBreak","breakLength","incrementBreak","Session","decrementSession","sessionLength","incrementSession","Timer","useState","setBreakLength","setSessionLength","secondsLeft","setSecondsLeft","timerRunning","setTimerRunning","timerLabel","setTimerLabel","myAudio","useRef","context","AudioContext","minutes","Math","floor","seconds","useEffect","contador","setInterval","current","play","clearInterval","slice","resume","pause","currentTime","src","soundfile","type","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c253150.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wronger-rave-hit.20fab26e.wav\";","import React from 'react';\nconst Break = (props) => {\n    return (\n      <div>\n        <h2 id=\"break-label\">Break Length</h2>\n        <div className=\"align-row\">\n          <button \n            id=\"break-decrement\" \n            onClick={props.decrementBreak}>\n            ↓\n          </button>\n\n          <p \n            id=\"break-length\">\n            {props.breakLength}\n          </p>\n\n          <button \n            id=\"break-increment\" \n            onClick={props.incrementBreak}>\n            ↑\n          </button>\n        </div>\n      </div>\n    )\n  }\n\nexport default Break;","import React from 'react';\n\nconst Session = (props) => {\n    return (\n      <div>\n        <h2 id=\"session-label\">Session Length</h2>\n       \n        <div className=\"align-row\">\n          <button \n            id=\"session-decrement\" \n            onClick={props.decrementSession}>\n            ↓\n            </button>\n          <p id=\"session-length\">{props.sessionLength}</p>\n          <button \n            id=\"session-increment\" \n            onClick={props.incrementSession}>\n            ↑\n          </button>\n        </div>\n      </div>\n    )\n}\nexport default Session","import React, { useState, useEffect, useRef } from 'react';import Break from './Break';\nimport soundfile from './wronger-rave-hit.wav';\nimport Session from './Session';\n\nconst Timer = () => {\n    const [breakLength, setBreakLength] = useState(5);\n    const [sessionLength, setSessionLength] = useState(25);\n    const [secondsLeft, setSecondsLeft] = useState(25 * 60);\n    const [timerRunning, setTimerRunning] = useState(false);\n    const [timerLabel, setTimerLabel] = useState('Session');\n\n    const myAudio = useRef();\n    const context = new AudioContext();\n\n  let minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n\n  const incrementBreak = () => {\n    if(!timerRunning && breakLength < 60 ){\n      setBreakLength(breakLength + 1)\n    }}\n\n  const decrementBreak = () => {\n    if(!timerRunning && breakLength > 1) {\n    setBreakLength(breakLength - 1);\n  }}\n\n  const incrementSession = () => {\n    if(!timerRunning && sessionLength <60 ){\n      setSessionLength(sessionLength + 1);\n      setSecondsLeft((sessionLength + 1) * 60);\n    }\n  }\n\n  const decrementSession = () => {\n    if(!timerRunning && sessionLength > 1 ){\n      setSessionLength(sessionLength - 1);\n      setSecondsLeft((sessionLength - 1)* 60)}\n  }\n  \n  const startTimer = () => {\n    context.resume();\n    setTimerRunning(true)\n  }\n\n  const pauseTimer = () => {\n    setTimerRunning(false)\n  }\n\n  const resetTimer = () => {\n    setBreakLength(5);\n    setSessionLength(25);\n    setSecondsLeft(25 * 60);\n    setTimerRunning(false);\n    setTimerLabel('Session');\n    myAudio.current.pause();\n    myAudio.current.currentTime = 0;\n  }\n\n  useEffect(() => {\n    const handleSwitch = () => {\n      if (timerLabel === 'Session'){\n        setTimerLabel('Break');\n        setSecondsLeft(breakLength *60);\n      } else if (timerLabel === 'Break'){\n        setTimerLabel('Session');\n        setSecondsLeft(sessionLength * 60);\n      }\n    }\n\n    let contador = null\n    if (timerRunning && secondsLeft >0){\n      contador = setInterval( () => {setSecondsLeft(secondsLeft -1)}, 1000)\n    } else if(timerRunning && secondsLeft === 0) {\n      contador = setInterval( () => {setSecondsLeft(secondsLeft -1)}, 1000);\n      myAudio.current.play();\n      handleSwitch();\n    } else{\n      clearInterval(contador)\n    };\n    return () => {\n      clearInterval(contador)\n    };\n  }, [timerRunning, secondsLeft, timerLabel, breakLength, sessionLength, myAudio]);\n\n    return (\n    <div className=\"App\">\n      <header><h1>Pomodoro Clock</h1></header>\n      <div className=\"grid-container\">\n        \n        <Break\n          breakLength={breakLength}\n          incrementBreak={incrementBreak}\n          decrementBreak={decrementBreak}\n        />\n\n        <Session\n          sessionLength={sessionLength}\n          incrementSession={incrementSession}\n          decrementSession={decrementSession}\n        />\n      </div>\n      <div className=\"Timer\">\n        <h1 id=\"timer-label\">{timerLabel}</h1>\n        \n        <h2 id=\"time-left\">\n        {minutes < 10 ? (\"0\" + minutes).slice(-2) : minutes}:{seconds < 10 ? (\"0\" + seconds).slice(-2) : seconds}\n          </h2>\n        <div className=\"grid-container\">\n          <button \n            id=\"start_stop\" \n            onClick={timerRunning ?   pauseTimer : startTimer }>\n            { timerRunning ?  \"❚❚\" : \"▶\"}\n        </button>\n         \n          <button \n            id=\"reset\" \n            onClick={resetTimer}> ↺ </button>\n        </div>\n        \n        <audio \n        src={soundfile} \n        id=\"beep\" \n        type=\"audio\" \n        ref={myAudio}\n        ></audio>\n      </div>\n    </div>\n    )\n  }\nexport default Timer","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nimport Timer from './Timer'\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\">\n      \n      \n\n      <Timer \n        /* seconds={seconds}\n        minutes={minutes}\n        resetTimer={resetTimer}\n        timerRunning={timerRunning}\n        \n        pauseTimer={pauseTimer}\n        startTimer={startTimer}\n        myAudio={myAudio}\n        timerLabel={timerLabel} */\n        />\n\n        \n    </div>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}